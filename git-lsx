#!/usr/bin/env bash
# git-lsx - Lists files in the index, emphasizing those marked executable.
#
# This file is part of gitscripts, some custom git commands.
#
# Written in 2019 by Eliah Kagan <degeneracypressure@gmail.com>.
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain
# worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software. If not, see
# <http://creativecommons.org/publicdomain/zero/1.0/>.

set -efo pipefail
shopt -s lastpipe

# See inode(7), "The file type and mode"
declare -ri S_IFMT=8#170000 S_IFLNK=8#120000

if [ -t 1 ]; then
    readonly symlink_color=$'\e[01;36m' # bright cyan
    readonly exec_color=$'\e[01;32m'    # bright green
    readonly merge_color=$'\e[01;31m'   # bright red
    readonly no_color=$'\e[0m'          # white
else
    readonly symlink_color='' exec_color='' merge_color='' no_color=''
fi

declare -ri status_good=0 status_malformed_record=2
declare -i status="$status_good"

display() { # pass (mode string, stage number, pathname)
    local -ri bits="8#$1" num="$2"
    local -r path="$3"

    if (((bits & S_IFMT) == S_IFLNK)); then # symbolic link
        local -r before="$symlink_color" after="${no_color}@"
    elif ((bits & 8#111)); then # at least one executable bit set
        local -r before="$exec_color" after="${no_color}*"
    else
        local -r before='' after=''
    fi

    if ((num > 0)); then # candidate in merge conflict
        local -r merge="  $merge_color(MERGING #$num)$no_color"
    else
        local -r merge=''
    fi

    local -ri low_bits="$((bits % 8#10000))"
    printf '%04o  %s%s%s%s\n' "$low_bits" "$before" "$path" "$after" "$merge"
}

readonly -f display
readonly record_pattern='^([0-7]+) [[:xdigit:]]+ ([[:digit:]]+)'$'\t''(.+)$'

git ls-files -sz -- "$@" | while IFS= read -rd '' record; do
    if [[ $record =~ $record_pattern ]]; then
        display "${BASH_REMATCH[@]:1:3}"
    else
        ((status != status_good)) || status="$status_malformed_record"
        printf '%s: malformed record "%s"\n' "$0" "$record" >&2
    fi
done

exit "$status"

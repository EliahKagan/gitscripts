#!/usr/bin/env bash
# git-lsx - Lists files in the index, emphasizing those marked executable.
#
# This file is part of gitscripts, some custom git commands.
#
# Written in 2019 by Eliah Kagan <degeneracypressure@gmail.com>.
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain
# worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software. If not, see
# <http://creativecommons.org/publicdomain/zero/1.0/>.

set -efo pipefail

# See inode(7), "The file type and mode"
declare -ri S_IFMT=8#170000 S_IFLNK=8#120000

readonly miss='missing in "git ls-files -s" output'

if [ -t 1 ]; then
    readonly symlink_color=$'\e[01;36m' # bright cyan
    readonly exec_color=$'\e[01;32m'    # bright green
    readonly merge_color=$'\e[01;31m'   # bright red
    readonly no_color=$'\e[0m'          # white
else
    readonly symlink_color='' exec_color='' merge_color='' no_color=''
fi

declare -i bits low_bits

git ls-files -sz -- "$@" | while read -rd '' mode hash num path; do
    : "${mode:?$miss}" "${hash:?$miss}" "${num:?$miss}" "${path:?$miss}"
    bits="8#$mode"

    if (((bits & S_IFMT) == S_IFLNK)); then # symbolic link
        before="$symlink_color" after="${no_color}@"
    elif ((bits & 8#111)); then # at least one executable bit set
        before="$exec_color" after="${no_color}*"
    else
        before='' after=''
    fi

    # If this entry is a candidate in a merge conflict, make that clear.
    if ((num > 0)); then
        merge="  $merge_color(MERGING #$num)$no_color"
    else
        merge=''
    fi

    low_bits="$((bits % 8#10000))"
    printf '%04o  %s%s%s%s\n' "$low_bits" "$before" "$path" "$after" "$merge"
done
